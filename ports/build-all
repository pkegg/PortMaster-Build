#! /bin/bash
set -e
DIR="$(realpath $( dirname "${BASH_SOURCE[0]}" ))"
ARGS_COPY=("$@")

function parse_args() {
  LIBRARIES=""
  LEGACY_PORTMASTER_DEFAULT=""
  LEGACY_PORTMASTER_OVERRIDE=""
  BUILDS=""
  DO_BUILD="true"
  BUILD_SPLIT_TOTAL=""
  BUILD_SPLIT=""
  SHOW_NAME=""
  USE_REMOTE_BUILD_CACHE="false"

  # Parse args
  ARGS=()
  while [[ $# -gt 0 ]]; do
    key="$1"
  
    case $key in
      -l|--libraries)
        LIBRARIES="true"
        BUILD_ALL=false
        shift # past argument
        ;;
      --legacy-default)
        LEGACY_PORTMASTER_DEFAULT="true"
        BUILD_ALL=false
        shift # past argument
        ;;
      --legacy-url-override)
        LEGACY_PORTMASTER_OVERRIDE="true"
        BUILD_ALL=false
        shift # past argument
        ;;
      --builds)
        BUILDS="true"
        BUILD_ALL=false
        shift # past argument
        ;;
      --use-remote-build-cache)
        USE_REMOTE_BUILD_CACHE="true"
        shift # past argument
        ;;
      --no-build*)
        DO_BUILD="false"
        shift # past argument
        ;;
      --show-name*)
        SHOW_NAME="true"
        shift # past argument
        ;;
      --build-shard-total)
        BUILD_SPLIT_TOTAL="$2"
        shift # past argument
        shift # past value
        ;;
      --build-shard)
        BUILD_SPLIT="$2"
        shift # past argument
        shift # past value

        ;;
      -h|--help)
        echo "$0  [arguments]"
        echo "  --libraries - lists all PKG_LIBRARY=true"
        echo "  --legacy-default - lists all LEGACY_PORTMASTER=true which do not have an LEGACY_URL_OVERRIDE"
        echo "  --legacy-override-url - lists all LEGACY_PORTMASTER=true which have a LEGACY_URL_OVERRIDE"
        echo "  --builds - lists all non-legacy builds"
        echo "  --no-builds - just output the list of builds which would be run"
        echo "  --use-remote-build-cache - use remote cache to see if a build needs to be run"
        echo "  --show-name - outputs PKG_NAME instead of the directory name.  Useful with --no-builds"
        echo "  --build-shard-total - the total number to shard the jobs into - used with --build-shard to only build a subset of builds"
        echo "  --build-shard - the specific shards (modulus) to run.  Starts from 1.  Ex: --build-shard-total=5 and --build-shard=1 the first of each 5 builds will be run" 

        exit 1
        ;;
      *)    # unknown option
        ARGS+=("$1") # save it in an array for later
        shift # past argument
        ;;
    esac
  done
}
function get_to_build_name() {

  local TO_BUILD="$1"

}
function run_build() {

    local directory="$1"
    local BUILD_ARGS="$2"
    local TO_BUILD="$(basename ${directory})"
    local TO_BUILD_NAME=$TO_BUILD

    if [[ "${SHOW_NAME}" == "true" ]]; then
      TO_BUILD_NAME="$PKG_NAME"
      if [[ -n "${PKG_ZIP_NAME_OVERRIDE}" ]]; then
         TO_BUILD_NAME="$PKG_ZIP_NAME_OVERRIDE"
      fi
    fi
    if [[ "$USE_REMOTE_BUILD_CACHE" == "true" ]] && remote_cache_matches ${directory}; then
       echo_err "remote cache matches for: $TO_BUILD"
       return
    fi
    echo "${TO_BUILD_NAME}"
    if [[ "${DO_BUILD}" == "true" ]]; then
      ${DIR}/build "${TO_BUILD}" "${BUILD_ARGS}"
    fi

}
parse_args "$@"
source $DIR/build

CURRENT_BUILD_SPLIT=0
for directory in ${DIR}/*/; do
  directory=${directory%/}
  CURRENT_BUILD_SPLIT="$((${CURRENT_BUILD_SPLIT} + 1))"
  if [[ "$CURRENT_BUILD_SPLIT" -gt "$BUILD_SPLIT_TOTAL" ]]; then
    CURRENT_BUILD_SPLIT=1
  fi
  #echo "current build shard: ${CURRENT_BUILD_SPLIT} shard: ${BUILD_SPLIT}"
  if [[ -n "${BUILD_SPLIT_TOTAL}" ]]; then
    if [[ "$CURRENT_BUILD_SPLIT" != "${BUILD_SPLIT}" ]]; then
       continue
    fi
  fi
  #echo "directory: $directory"
  if [ -f "${directory}/package.info" ]; then
    PKG_LIBRARY=""
    LEGACY_URL_OVERRIDE=""
    LEGACY_PORTMASTER=""
    PKG_ZIP_NAME_OVERRIDE=""
    PKG_DEPENDS=""
    source "${directory}/package.info"


    if [[ "${LIBRARIES}" == "true"  && -n "$PKG_LIBRARY" ]]; then
      run_build "${directory}" "${ARGS_COPY[@]}"
    elif [[ "${LEGACY_PORTMASTER_OVERRIDE}" == "true" && -n "${LEGACY_URL_OVERRIDE}" &&  "${LEGACY_PORTMASTER}" == "true" ]]; then
      run_build "${directory}" "${ARGS_COPY[@]}"
    elif [[ "${LEGACY_PORTMASTER_DEFAULT}" == "true" && -z "${LEGACY_URL_OVERRIDE}" &&  "${LEGACY_PORTMASTER}" == "true" ]]; then
      run_build "${directory}" "${ARGS_COPY[@]}"
    elif [[ "${BUILDS}" == "true" ]]; then
      run_build "${directory}" "${ARGS_COPY[@]}"
    elif [[ "$BUILD_ALL" != "false" ]]; then
      run_build "${directory}" "${ARGS_COPY[@]}"
    fi
  fi
done
